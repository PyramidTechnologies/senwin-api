openapi: 3.1.0
info:
  title: SenWin
  version: 0.0.0
tags: []

webhooks:
  newEvent:
    post:
      description: A ticket was redeemed by at a kiosk.
      parameters:
        - in: header
          name: Sentry-Signature
          required: true
          schema:
            type: string
            description: "HMAC-SHA256 of the request body"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
            example:
              correlationId: "ABCDEFG12345"
              deviceId: "80DEF45C"
              type: "Redemption"
              version: 1
              data:
                redeemedAt: 1755191889
                status: "redeemed"
                amount: 50000
                amountDue: 0
                hash: "asb58439baksjd1"
                printer: "1100001123"

paths:
  /pair:
    post:
      operationId: pairDevice
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pairingCode:
                  type: string
                  description: "8 digit pairing code displayed on the device or received from creating a sandbox device"
  /devices/{deviceId}/commands:
    post:
      operationId: sendCommand
      parameters:
        - in: path
          name: deviceId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommandRequest"
      responses:
        "200":
          description: "Command sent successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommandStatus"
        "404":
          description: "Device not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "Server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /devices/{deviceId}/commands/{commandId}:
    delete:
      operationId: cancelCommand
      parameters:
        - in: path
          name: deviceId
          required: true
          schema:
            type: string
            description: "ID of the device the command was sent to"
        - in: path
          name: commandId
          required: true
          schema:
            type: string
            description: "ID of the command to cancel"
      responses:
        "204":
          description: "Command cancelled, no content"
        "404":
          description: "Device or command not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "Server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /webhooks:
    post:
      operationId: createWebhook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookRequest"
      responses:
        "200":
          description: Webhook was created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  webhookSecret:
                    type: string
                    description: "Secret key for checking HMAC SHA-256 signature of events"
        "400":
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      operationId: listWebhooks
      responses:
        "200":
          description: List of existing webhook endpoints
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Destination"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /webhooks/{webhookId}:
    put:
      parameters:
        - name: webhookId
          in: path
          required: true
          schema:
            type: string
      operationId: updateWebhook
      description: "Updates any non-empty fields, optionally rolls the secret"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookRequest"
      responses:
        "200":
          description: Webhook was updated successfully, new secret created
          content:
            application/json:
              schema:
                type: object
                properties:
                  webhookSecret:
                    type: string
                    description: "Secret key for checking HMAC SHA-256 signature of events"
        "204":
          description: Webhook created successfully, no content
        "400":
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      parameters:
        - name: webhookId
          in: path
          required: true
          schema:
            type: string
      operationId: removeWebhook
      description: "Removes an endpoint"
      responses:
        "204":
          description: Webhook removed, no content
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /sandbox/devices:
    post:
      operationId: createSandboxDevice
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SandboxDeviceRequest"
      responses:
        "200":
          description: Device created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SandboxDevice"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /sandbox/devices/{deviceId}:
    delete:
      operationId: removeSandboxDevice
      parameters:
        - name: deviceId
          in: path
          required: true
          schema:
            type: string
      description: Delete a sandbox device
      responses:
        "204":
          description: Device removed, no content
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /sandbox/events:
    post:
      operationId: generateEvent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventRequest"
      responses:
        "204":
          description: "Event generated, no content"
        "400":
          description: "Invalid request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "Server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

security:
  - ApiKeyAuth: []

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
  schemas:
    Redemption:
      type: object
      description: "Represents an attempt to redeem a Sentry ticket"
      required:
        - redeemedAt
        - status
        - amount
        - amountDue
        - hash
        - printer
      properties:
        redeemedAt:
          type: integer
          format: int64
          description: "Time the ticket was validated (unix, s)"
        createdAt:
          type: integer
          format: int64
          description: "Optional, time the ticket was printed, only available on some printers (unix, s)"
        status:
          $ref: "#/components/schemas/RedemptionStatus"
        amount:
          type: integer
          description: "Value of the ticket, in cents"
        amountDue:
          type: integer
          description: "Amount that still needs to be paid out, in cents"
        hash:
          type: string
          description: "Used by the kiosk to check for duplicates"
        printer:
          type: string
          length: 9
          description: "Serial number of the printer that printed the ticket"
    RedemptionStatus:
      type: string
      enum:
        - redeemed
        - duplicate
        - expired
    AccountingPeriod:
      type: object
      description: "Represents a date range for accounting purposes, each period starts at the end of the previous period. Operators manually end the period, e.g., at the end of each 8-hour shift"
      required:
        - start
        - end
        - totalRedeemed
        - totalDue
      properties:
        start:
          type: integer
          format: int64
          description: "End of the previous period (unix, s)"
        end:
          type: integer
          format: int64
          description: "Time the user ended this period (unix, s)"
        totalRedeemed:
          type: integer
          description: "Total amount redeemed during the period, in cents"
        totalDue:
          type: integer
          description: "Total amount of incomplete payouts during the period, in cents"
    Fill:
      type: object
      description: "Reported when a technician adds (or balances) bills to the dispenser. Arrays represent the cassettes in the dispenser, ordered top to bottom."
      required:
        - filledAt
        - denominations
        - remainingCounts
        - rejectedCounts
        - dispensedCounts
        - newCounts
      properties:
        filledAt:
          type: integer
          format: int64
        denominations:
          type: array
          items:
            type: integer
            format: int16
          description: "Denomination configured for each cassette"
        remainingCounts:
          type: array
          items:
            type: integer
            format: 16
          description: "Bills remaining in the dispenser prior to the fill"
        newCounts:
          type: array
          items:
            type: integer
            format: 16
          description: "Current counts in the dispenser, after completing the fill"
        dispensedCounts:
          type: array
          items:
            type: integer
            format: 16
          description: "Number of bills dispensed from each cassette since the last fill"
        rejectedCounts:
          type: array
          items:
            type: integer
            format: 16
          description: "Number of bills rejected from each cassette since the last fill"
    DispenserStatus:
      type: object
      description: "Notifies changes to the state of the dispenser, jams, dispenses, etc."
      required:
        - cassettes
        - reportType
      properties:
        cassettes:
          type: array
          items:
            $ref: "#/components/schemas/Cassette"
        reportType:
          $ref: "#/components/schemas/DispenserReportType"
        message:
          type: string
          description: "Optional message describing the status, e.g. an error code if the dipsenser jammed"
    DispenserReportType:
      description: "Reason the status was updated, primarily just used internally"
      type: integer
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
      x-enum-varnames:
        - Initialized
        - Dispensed
        - Serviced
        - Error
        - HealthCheck
    Cassette:
      type: object
      description: Represents a physical cassette in the dispenser, holds 1 denomination of bills
      required:
        - denomination
        - count
      properties:
        denomination:
          type: integer
          example: 20
        count:
          type: integer
          example: 31
    Login:
      type: object
      description: "Represents an attempt to login to the service screen on the kiosk"
      required:
        - attemptedAt
        - user
        - loggedIn
        - failedAttempts
      properties:
        attemptedAt:
          type: integer
          format: int64
          example: 1755026365
          description: "Time the user logged in or attempted to (unix, s)"
        user:
          type: string
          example: ADMIN
          description: "Placeholder for future use, ADMIN or TECHNICIAN"
        loggedIn:
          type: boolean
          example: true
          description: "Whether the login attempt was successful or not"
        failedAttempts:
          type: integer
    CommandRequest:
      type: object
      required:
        - command
      properties:
        command:
          $ref: "#/components/schemas/CommandType"
        scheduledFor:
          type: date-time
          description: "UTC datetime to run the command at (best effort, will run at or after this time)"
        expiresAt:
          type: date-time
          description: "UTC datetime that te command should automatically cancel, especially useful when marking a kiosk out of service"
    CommandStatus:
      type: object
      required:
        - id
        - status
        - completedAt
      properties:
        id:
          type: string
          description: "ID of the command"
        status:
          type: string
          description: "Current status of the command, as reported by the kiosk"
          enum:
            - pending
            - success
            - failed
            - canceled
        completedAt:
          type: integer
          format: int64
          description: "Time the kiosk processed the command (unix, s)"
    CommandType:
      type: string
      description: |
        Command to run, all commands will wait until no redemptions / user interactions are in progress:
        
        * `outOfService` - Displays an out of service screen, prevents redeeming tickets
        * `restart` - Tells the kiosk to perform a restart via the OS
        * `resetDispenser` - Sends a reset command to the dispenser, attempts to clear jams and error states
      enum:
        - outOfService
        - restart
        - resetDispenser
    DeviceShadow:
      type: object
      description: "Describes state that can be modified by both the server and the device (more of a placeholder now)"
      properties:
        isOutOfService:
          type: boolean
          description: "Flag indicating if the kiosk has been disabled by a command / for maintenance"
    Event:
      type: object
      required:
        - correlationId
        - deviceId
        - type
        - version
      properties:
        correlationId:
          type: string
          description: Unique ID for each event, used for logging and deduplication
        deviceId:
          type: string
          anyOf:
            - length: 8
              pattern: "[a-zA-Z0-9]{8}"
            - length: 11
              pattern: "SB-[a-zA-Z0-9]{8}"
          description: ID of the device the event came from
        type:
          type: string
          description: Type of event, determines the schema of the data field
        version:
          type: integer
          description: "Version of the event schema, reserved in the event a breaking changes needs to be made on the client side"
      discriminator:
        propertyName: type
      mapping:
        Redemption: "#/components/schemas/RedemptionEvent"
        DispenseEvent: "#/components/schemas/DispenseEvent"
        FillEvent: "#/components/schemas/FillEvent"
        LoginEvent: "#/components/schemas/LoginEvent"
        AccountingPeriod: "#/components/schemas/AccountingPeriodEvent"
    RedemptionEvent:
      allOf:
        - $ref: "#/components/schemas/Event"
      required:
        - data
      properties:
        data:
          $ref: "#/components/schemas/Redemption"
    DispenserStatusEvent:
      allOf:
        - $ref: "#/components/schemas/Event"
      required:
        - data
      properties:
        data:
          $ref: "#/components/schemas/DispenserStatus"
    FillEvent:
      allOf:
        - $ref: "#/components/schemas/Event"
      required:
        - data
      properties:
        data:
          $ref: "#/components/schemas/Fill"
    LoginEvent:
      allOf:
        - $ref: "#/components/schemas/Event"
        - type: object
          required:
            - data
          properties:
            data:
              $ref: "#/components/schemas/Login"
    AccountingPeriodEvent:
      type: object
      required:
        - type
        - data
      properties:
        type:
          type: string
        data:
          $ref: "#/components/schemas/AccountingPeriod"
    WebhookRequest:
      type: object
      properties:
        endpoint:
          type: string
          description: "API endpoint to send events to"
        description:
          type: string
          description: "Optional description"
        rollSecret:
          type: boolean
          description: "True to generate a new signature key / secret when updating an endpoint"
    Error:
      type: object
      required:
        - error
      properties:
        error:
          type: string
    SandboxDeviceRequest:
      type: object
      properties:
        name:
          type: string
          description: "Optional name for this device"
        pairAutomatically:
          type: boolean
          description: "True to pair this device to your account immediately. False to receive a pairing code to manually pair the device."
    SandboxDevice:
      type: object
      description: "Fake device used for testing events"
      required:
        - deviceId
      properties:
        deviceId:
          type: string
        pairingCode:
          type: string
          description: "Pairing code to send to /pair. Omitted if you chose pair automatically"
          example: '01234567'
        expiresAt:
          type: date-time
          description: "Time the pairing code expires. Omitted if you chose pair automatically"
          example: '2025-08-14T09:12:28Z'
    EventRequest:
      type: object
      description: "Request to generate an event for testing. You may either specify just the type to generate random data, or include the specific data you want sent"
      required:
        - deviceId
        - type
      properties:
        deviceId:
          type: string
          description: "Device to send the event from"
        type:
          type: string
          description: "Type name of the event to generate"
        discriminator:
          propertyName: type
        mapping:
          Redemption: "#/components/schemas/RedemptionEvent"
          DispenseEvent: "#/components/schemas/DispenseEvent"
          FillEvent: "#/components/schemas/FillEvent"
          LoginEvent: "#/components/schemas/LoginEvent"
          PeriodReport: "#/components/schemas/AccountingPeriodEvent"
    Destination:
      type: object
      description: "Endpoint destination that receives events"
      properties:
        destinationId:
          type: string
        endpoint:
          type: string
        description:
          type: string
        signatureKey:
          type: string
          description: "Secret/key to validate the Sentry-Signature header"
