openapi: 3.1.0
info:
  title: SenWin
  version: 0.0.0
tags: []

webhooks:
  newRedemption:
    post:
      description: A ticket was redeemed by at a kiosk.
      requestBody:
        parameters:
          - in: header
            name: Sentry-Signature
            required: true
            schema:
              type: string
              description: 'HMAC-SHA256 of the request body'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
paths:
  /webhooks:
    post:
      operationId: createWebhook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookInput'
      responses:
        '200':
          description: Webhook was created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  webhookSecret:
                    type: string
                    description: 'Secret key for checking HMAC SHA-256 signature of events'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      operationId: listWebhooks
      responses:
        '200':
          description: List of existing webhook endpoints
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Destination'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /webhooks/{webhookId}:
    put:
      parameters:
        - name: webhookId
          in: path
          required: true
          schema:
            type: string
      operationId: updateWebhook
      description: 'Updates any non-empty fields, optionally rolls the secret'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookInput'
      responses:
        '200':
          description: Webhook was updated successfully, new secret created
          content:
            application/json:
              schema:
                type: object
                properties:
                  webhookSecret:
                    type: string
                    description: 'Secret key for checking HMAC SHA-256 signature of events'
        '204':
          description: Webhook created successfully, no content
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      parameters:
        - name: webhookId
          in: path
          required: true
          schema:
            type: string
      operationId: removeWebhook
      description: 'Removes an endpoint'
      responses:
        '204':
          description: Webhook removed, no content
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sandbox/devices:
    post:
      operationId: createSandboxDevice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SandboxDeviceRequest'
      responses:
        '200':
          description: Device created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SandboxDevice'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sandbox/devices/{deviceId}:
    delete:
      operationId: removeSandboxDevice
      parameters:
        - name: deviceId
          in: path
          required: true
          schema:
            type: string
      description: Delete a sandbox device
      responses:
        '204':
          description: Device removed, no content
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /sandbox/events:
    post:
      operationId: generateEvent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventRequest'
      responses:
        '204':
          description: 'Event generated, no content'
        '400':
          description: 'Invalid request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Redemption:
      type: object
      required:
        - redeemedAt
        - status
        - amount
        - amountDue
        - hash
        - printer
      properties:
        redeemedAt:
          type: integer
          format: int64
          description: 'Time the ticket was validated (unix, s)'
        createdAt:
          type: integer
          format: int64
          description: 'Optional, time the ticket was printed, only available on some printers (unix, s)'
        status:
          $ref: '#/components/schemas/RedemptionStatus'
        amount:
          type: integer
          description: 'Value of the ticket, in cents'
        amountDue:
          type: integer
          description: 'Amount that still needs to be paid out, in cents'
        hash:
          type: string
          description: 'Used by the kiosk to check for duplicates'
        printer:
          type: string
          length: 9
          description: 'Serial number of the printer that printed the ticket'
    RedemptionStatus:
      type: string
      enum:
        - redeemed
        - duplicate
        - expired
    AccountingPeriod:
      type: object
      required:
        - start
        - end
        - totalRedeemed
        - totalDue
      properties:
        start:
          type: integer
          format: int64
          description: 'End of the previous period (unix, s)'
        end:
          type: integer
          format: int64
          description: 'Time the user ended this period (unix, s)'
        totalRedeemed:
          type: integer
          description: 'Total amount redeemed during the period, in cents'
        totalDue:
          type: integer
          description: 'Total amount of incomplete payouts during the period, in cents'
    Fill:
      type: object
      description: 'Reported when a technician adds (or balances) bills to the dispenser. Arrays represent the cassettes in the dispenser, ordered top to bottom.'
      required:
        - filledAt
        - denominations
        - remainingCounts
        - rejectedCounts
        - dispensedCounts
        - newCounts
      properties:
        filledAt:
          type: integer
          format: int64
        denominations:
          type: array
          items:
            type: integer
            format: int16
          description: 'Denomination configured for each cassette'
        remainingCounts:
          type: array
          items:
            type: integer
            format: 16
          description: 'Bills remaining in the dispenser prior to the fill'
        newCounts:
          type: array
          items:
            type: integer
            format: 16
          description: 'Current counts in the dispenser, after completing the fill'
        dispensedCounts:
          type: array
          items:
            type: integer
            format: 16
          description: 'Number of bills dispensed from each cassette since the last fill'
        rejectedCounts:
          type: array
          items:
            type: integer
            format: 16
          description: 'Number of bills rejected from each cassette since the last fill'
    DispenserStatus:
      type: object
      required:
        - cassettes
        - reportType
      properties:
        cassettes:
          type: array
          items:
            $ref: '#/components/schemas/Cassette'
        reportType:
          $ref: '#/components/schemas/DispenserReportType'
        message:
          type: string
          description: 'Optional message describing the status, e.g. an error code if the dipsenser jammed'
    DispenserReportType:
      description: 'Reason the status was updated, primarily just used internally'
      type: integer
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
      x-enum-varnames:
        - Initialized
        - Dispensed
        - Serviced
        - Error
        - HealthCheck
    Cassette:
      type: object
      required:
        - denomination
        - count
      properties:
        denomination:
          type: integer
          example: 20
        count:
          type: integer
          example: 31
    Login:
      type: object
      required:
        - attemptedAt
        - user
        - loggedIn
        - failedAttempts
      properties:
        attemptedAt:
          type: integer
          format: int64
          example: 1755026365
          description: 'Time the user logged in or attempted to (unix, s)'
        user:
          type: string
          example: ADMIN
          description: 'Placeholder for future use, ADMIN or TECHNICIAN'
        loggedIn:
          type: boolean
          example: true
          description: 'Whether the login attempt was successful or not'
        failedAttempts:
          type: integer
    CommandStatus:
      type: object
      required:
        - id
        - status
        - completedAt
      properties: 
        id:
          type: string
        status:
          type: string
          enum:
            - pending
            - success
            - failed
            - canceled
        completedAt:
          type: integer
          format: int64
          description: 'Time the kiosk processed the command (unix, s)'
    CommandType:
      type: string
      enum:
        - outOfService
        - restart
        - resetDispenser
    DeviceShadow:
      type: object
      description: 'Describes state that can be modified by both the server and the device (more of a placeholder now)'
      properties:
        isOutOfService:
          type: boolean
          description: 'Flag indicating if the kiosk has been disabled by a command / for maintenance'
    Event:
      type: object
      required:
        - correlationId
        - deviceId
        - type
        - version
      properties:
        correlationId:
          type: string
        deviceId:
          type: string
        type:
          type: string
        version:
          type: integer
      discriminator:
        propertyName: type
      mapping:
        Redemption: '#/components/schemas/RedemptionEvent'
        DispenseEvent: '#/components/schemas/DispenseEvent'
        FillEvent: '#/components/schemas/FillEvent'
        LoginEvent: '#/components/schemas/LoginEvent'
        PeriodReport: '#/components/schemas/AccountingPeriodEvent'
    RedemptionEvent:
      allOf:
        - $ref: '#/components/schemas/Event'
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/Redemption'
    DispenserStatusEvent:
      allOf:
        - $ref: '#/components/schemas/Event'
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/DispenserStatus'
    FillEvent:
      allOf:
        - $ref: '#/components/schemas/Event'
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/Fill'
    LoginEvent:
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
          required:
            - data
          properties:
            data:
              $ref: '#/components/schemas/Login'
    AccountingPeriodEvent:
      type: object
      required:
        - type
        - data
      properties:
        type:
          type: string
        data:
          $ref: '#/components/schemas/AccountingPeriod'
    WebhookInput:
      type: object
      properties:
        endpoint:
          type: string
          description: 'API endpoint to send events to'
        description:
          type: string
          description: 'Optional description'
        rollSecret:
          type: boolean
          description: 'True to generate a new signature key / secret when updating an endpoint'
    Error:
      type: object
      required:
        - error
      properties:
        error:
          type: string
    SandboxDeviceRequest:
      type: object
      properties:
        name:
          type: string
          description: 'Optional name for this device'
        pairAutomatically:
          type: boolean
          description: 'True to pair this device to your account immediately. False to receive a pairing code to manually pair the device.'
    SandboxDevice:
      type: object
      required:
        - deviceId
      properties:
        deviceId:
          type: string
        pairingCode:
          type: string
          description: 'Pairing code to send to /pair'
        expiresAt:
          type: date-time
          description: 'Time the pairing code expires'
    EventRequest:
      type: object
      required:
        - deviceId
        - type
      properties:
        deviceId:
          type: string
          description: 'Device to send the event from'
        type:
          type: string
          description: 'Type name of the event to generate'
        discriminator:
          propertyName: type
        mapping:
          Redemption: '#/components/schemas/RedemptionEvent'
          DispenseEvent: '#/components/schemas/DispenseEvent'
          FillEvent: '#/components/schemas/FillEvent'
          LoginEvent: '#/components/schemas/LoginEvent'
          PeriodReport: '#/components/schemas/AccountingPeriodEvent'
    Destination:
      type: object
      properties:
        destinationId:
          type: string
        endpoint:
          type: string
        description:
          type: string
        signatureKey:
          type: string